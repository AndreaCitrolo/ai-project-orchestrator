#!/usr/bin/env claude-command
# Start Task
# Usage: start-task [initiative-dir] [TASK-ID]

## CRITICAL VALIDATION

Read `initiatives/[initiative-dir]/tasks.prd`

MUST verify:
- [ ] Task exists
- [ ] Task NOT marked `[x]`
- [ ] All dependencies marked `[x]`
- [ ] Cross-initiative dependencies complete
- [ ] Task in current/next available group

IF group N incomplete AND task in group M where M > N:
STOP. Output: "❌ Complete Group N first"

IF dependency incomplete:
STOP. Output: "❌ Blocked by: [dependency]"

## LOAD CONTEXT

Read (in order):
1. `project-state.prd` - relevant modules only
2. `initiatives/[initiative-dir]/description.prd` - testing requirements
3. Task details from tasks.prd

## UPDATE STATUS (START)

Append to `initiatives/[initiative-dir]/status.prd`:
```
[YYYY-MM-DD HH:MM] START TASK-XXX
```

## IMPLEMENT TASK

Execute task according to:
- Task description
- Project conventions from project-state.prd
- Testing requirements from description.prd

MUST:
- [ ] Write code
- [ ] Write tests (per PRD requirements)
- [ ] Run tests - MUST pass
- [ ] Commit to branch (if git)

## MARK COMPLETE

1. Update `initiatives/[initiative-dir]/tasks.prd`:
   Change `- [ ] TASK-XXX` to `- [x] TASK-XXX`

2. Append to `initiatives/[initiative-dir]/status.prd`:
   ```
   [YYYY-MM-DD HH:MM] DONE TASK-XXX
   Progress: X/N tasks (Y%)
   ```

## CHECK GROUP STATUS

Count tasks in current group:
- IF all `[x]`: Output "Group N complete (X/X)"
- ELSE: Output "Group N: X/Y tasks done"

Update status.prd if group complete:
```
Group [N]: [Name] COMPLETE [YYYY-MM-DD]
```

## CHECK INITIATIVE STATUS

IF all tasks in all groups `[x]`:
Output: "Initiative complete. Run: ../templates/close-initiative [initiative-dir]"

## SUGGEST NEXT

IF tasks remain in current group:
List incomplete tasks in current group

IF current group complete AND next group exists:
List first 2-3 tasks from next group

## ERROR HANDLING

IF implementation fails:
1. Document in status.prd: "[YYYY-MM-DD HH:MM] ERROR TASK-XXX: [brief reason]"
2. Mark task as blocked (keep `[ ]`)
3. Suggest alternative tasks

## VALIDATION BEFORE COMPLETION

MUST verify ALL:
- [ ] Code written
- [ ] Tests written
- [ ] Tests passing
- [ ] tasks.prd updated
- [ ] status.prd updated
- [ ] No TODO/FIXME in code

IF ANY fails: STOP. Do not mark task complete.

## OUTPUT FORMAT

Minimal output only:
```
TASK-XXX: [brief description]
Status: [DONE/ERROR/BLOCKED]
Group N: X/Y tasks
Next: [TASK-YYY or "None"]
```
